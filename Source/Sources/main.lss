
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000001  00810000  00810000  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000080  00000000  00000000  0000045f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e9  00000000  00000000  000004df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000585  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000347  00000000  00000000  00000b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000549  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000178  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000150  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	67 c0       	rjmp	.+206    	; 0xd2 <__bad_interrupt>
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	65 c0       	rjmp	.+202    	; 0xd2 <__bad_interrupt>
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	63 c0       	rjmp	.+198    	; 0xd2 <__bad_interrupt>
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	61 c0       	rjmp	.+194    	; 0xd2 <__bad_interrupt>
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	5f c0       	rjmp	.+190    	; 0xd2 <__bad_interrupt>

00000014 <frequences>:
  14:	88 01 88 01 88 01 37 01 d2 01 88 01 37 01 d2 01     ......7.....7...
  24:	88 01 4b 02 4b 02 4b 02 6e 02 d2 01 71 01 37 01     ..K.K.K.n...q.7.
  34:	d2 01 88 01 10 03 88 01 88 01 10 03 e3 02 ba 02     ................
  44:	93 02 6e 02 93 02 9f 01 2a 02 0b 02 ed 01 d2 01     ..n.....*.......
  54:	b8 01 d2 01 37 01 71 01 37 01 d2 01 88 01           ....7.q.7.....

00000062 <durations>:
  62:	5e 01 5e 01 5e 01 fa 00 64 00 5e 01 fa 00 64 00     ^.^.^...d.^...d.
  72:	bc 02 5e 01 5e 01 5e 01 fa 00 64 00 5e 01 fa 00     ..^.^.^...d.^...
  82:	64 00 bc 02 5e 01 fa 00 64 00 5e 01 fa 00 64 00     d...^...d.^...d.
  92:	64 00 64 00 c2 01 96 00 5e 01 fa 00 64 00 64 00     d.d.....^...d.d.
  a2:	64 00 c2 01 96 00 5e 01 fa 00 64 00 ee 02           d.....^...d...

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf e9       	ldi	r28, 0x9F	; 159
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	10 e0       	ldi	r17, 0x00	; 0
  ba:	a0 e6       	ldi	r26, 0x60	; 96
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	ea e9       	ldi	r30, 0x9A	; 154
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
  c8:	a0 39       	cpi	r26, 0x90	; 144
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>
  ce:	02 d0       	rcall	.+4      	; 0xd4 <main>
  d0:	62 c1       	rjmp	.+708    	; 0x396 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <main>:

#define REPEATER 3

int main (void)

{
  d4:	1f 93       	push	r17
	
	uint8_t scenary =0x00;
	scenary = scenary_changer();
  d6:	b6 d0       	rcall	.+364    	; 0x244 <scenary_changer>
  d8:	18 2f       	mov	r17, r24
	
	uint8_t i= 0;
	while(i<3)
	{
	animation(scenary);
  da:	25 d0       	rcall	.+74     	; 0x126 <animation>
  dc:	81 2f       	mov	r24, r17
  de:	23 d0       	rcall	.+70     	; 0x126 <animation>
  e0:	81 2f       	mov	r24, r17
  e2:	21 d0       	rcall	.+66     	; 0x126 <animation>
	i++;
	
	}
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  e4:	85 b7       	in	r24, 0x35	; 53
  e6:	87 7e       	andi	r24, 0xE7	; 231
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	85 bf       	out	0x35, r24	; 53
	sleep_enable(); 
  ec:	85 b7       	in	r24, 0x35	; 53
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	85 bf       	out	0x35, r24	; 53
    sleep_cpu();
  f2:	88 95       	sleep

}
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	1f 91       	pop	r17
  fa:	08 95       	ret

000000fc <led_control>:
}


void led_control(uint8_t ledInit, uint8_t ledNumber, uint8_t ledStatus)

{	
  fc:	98 2f       	mov	r25, r24
	if(ledStatus==OFF)	//Off led
  fe:	44 23       	and	r20, r20
 100:	49 f4       	brne	.+18     	; 0x114 <led_control+0x18>
	{	
		DDRB &= ~ledInit;
 102:	87 b3       	in	r24, 0x17	; 23
 104:	90 95       	com	r25
 106:	89 23       	and	r24, r25
 108:	87 bb       	out	0x17, r24	; 23
		PORTB &= ~ledNumber;
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	60 95       	com	r22
 10e:	86 23       	and	r24, r22
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret
		
	}

	if(ledStatus==ON)	//On led
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	31 f4       	brne	.+12     	; 0x124 <led_control+0x28>
	{
		DDRB |= ledInit;
 118:	87 b3       	in	r24, 0x17	; 23
 11a:	89 2b       	or	r24, r25
 11c:	87 bb       	out	0x17, r24	; 23
		PORTB |= ledNumber;
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	86 2b       	or	r24, r22
 122:	88 bb       	out	0x18, r24	; 24
 124:	08 95       	ret

00000126 <animation>:
0x08
};

void animation(uint8_t scenary)

{
 126:	cf 92       	push	r12
 128:	df 92       	push	r13
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
	uint8_t i=0;
	if(scenary ==0x00)
 136:	88 23       	and	r24, r24
 138:	f1 f4       	brne	.+60     	; 0x176 <animation+0x50>
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 13e:	40 e6       	ldi	r20, 0x60	; 96
 140:	e4 2e       	mov	r14, r20
 142:	4a ee       	ldi	r20, 0xEA	; 234
 144:	f4 2e       	mov	r15, r20
	{
	
	
	while(i<COUNTLED)
	{
		led_control(ledInit[i],ledCtrl[i],ON);
 146:	fe 01       	movw	r30, r28
 148:	e0 5a       	subi	r30, 0xA0	; 160
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	00 81       	ld	r16, Z
 14e:	fe 01       	movw	r30, r28
 150:	e8 58       	subi	r30, 0x88	; 136
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	10 81       	ld	r17, Z
 156:	80 2f       	mov	r24, r16
 158:	61 2f       	mov	r22, r17
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	cf df       	rcall	.-98     	; 0xfc <led_control>
 15e:	c7 01       	movw	r24, r14
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <animation+0x3a>
		_delay_ms(25);
		led_control(ledInit[i],ledCtrl[i],OFF);
 164:	80 2f       	mov	r24, r16
 166:	61 2f       	mov	r22, r17
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	c8 df       	rcall	.-112    	; 0xfc <led_control>
 16c:	22 96       	adiw	r28, 0x02	; 2
	uint8_t i=0;
	if(scenary ==0x00)
	{
	
	
	while(i<COUNTLED)
 16e:	c8 31       	cpi	r28, 0x18	; 24
 170:	d1 05       	cpc	r29, r1
 172:	49 f7       	brne	.-46     	; 0x146 <animation+0x20>
 174:	5e c0       	rjmp	.+188    	; 0x232 <animation+0x10c>
		i++;
	}
	
	}
	
	if(scenary ==0x01)
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	71 f5       	brne	.+92     	; 0x1d6 <animation+0xb0>
 17a:	c8 e7       	ldi	r28, 0x78	; 120
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	30 e9       	ldi	r19, 0x90	; 144
 180:	e3 2e       	mov	r14, r19
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	f3 2e       	mov	r15, r19
 186:	20 e6       	ldi	r18, 0x60	; 96
 188:	c2 2e       	mov	r12, r18
 18a:	2a ee       	ldi	r18, 0xEA	; 234
 18c:	d2 2e       	mov	r13, r18
	{
	i=COUNTLED;
	while(i)
	{
		led_control(ledInit[i],ledCtrl[i],ON);
 18e:	18 81       	ld	r17, Y
 190:	d7 01       	movw	r26, r14
 192:	0c 91       	ld	r16, X
 194:	81 2f       	mov	r24, r17
 196:	60 2f       	mov	r22, r16
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	b0 df       	rcall	.-160    	; 0xfc <led_control>
 19c:	c6 01       	movw	r24, r12
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <animation+0x78>
		_delay_ms(25);
		led_control(ledInit[i],ledCtrl[i],OFF);
 1a2:	81 2f       	mov	r24, r17
 1a4:	60 2f       	mov	r22, r16
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	a9 df       	rcall	.-174    	; 0xfc <led_control>
 1aa:	22 97       	sbiw	r28, 0x02	; 2
 1ac:	ee ef       	ldi	r30, 0xFE	; 254
 1ae:	ff ef       	ldi	r31, 0xFF	; 255
 1b0:	ee 0e       	add	r14, r30
 1b2:	ff 1e       	adc	r15, r31
	}
	
	if(scenary ==0x01)
	{
	i=COUNTLED;
	while(i)
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	c0 36       	cpi	r28, 0x60	; 96
 1b8:	df 07       	cpc	r29, r31
 1ba:	49 f7       	brne	.-46     	; 0x18e <animation+0x68>
		i--;
	}
	
	if(i==0)
	{
		led_control(ledInit[i],ledCtrl[i],ON);
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	9c df       	rcall	.-200    	; 0xfc <led_control>
 1c4:	80 e6       	ldi	r24, 0x60	; 96
 1c6:	9a ee       	ldi	r25, 0xEA	; 234
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <animation+0xa2>
		_delay_ms(25);
		led_control(ledInit[i],ledCtrl[i],OFF);
 1cc:	8a e0       	ldi	r24, 0x0A	; 10
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	94 df       	rcall	.-216    	; 0xfc <led_control>
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <animation+0x10c>
	}
	
	}
	if(scenary ==0x02)
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	11 f4       	brne	.+4      	; 0x1de <animation+0xb8>
	{
		march();
 1da:	93 d0       	rcall	.+294    	; 0x302 <march>
 1dc:	2a c0       	rjmp	.+84     	; 0x232 <animation+0x10c>
	}

	if(scenary ==0x03)
 1de:	83 30       	cpi	r24, 0x03	; 3
 1e0:	41 f5       	brne	.+80     	; 0x232 <animation+0x10c>
 1e2:	98 e7       	ldi	r25, 0x78	; 120
 1e4:	e9 2e       	mov	r14, r25
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	f9 2e       	mov	r15, r25
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	c8 2e       	mov	r12, r24
 1f2:	8a ee       	ldi	r24, 0xEA	; 234
 1f4:	d8 2e       	mov	r13, r24
	{
	
	i=0;
	while(i<COUNTLED)
	{
		led_control(ledInit[i]|ledInit[COUNTLED-i],ledCtrl[i],ON);
 1f6:	fe 01       	movw	r30, r28
 1f8:	e0 5a       	subi	r30, 0xA0	; 160
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	d7 01       	movw	r26, r14
 1fe:	1c 91       	ld	r17, X
 200:	80 81       	ld	r24, Z
 202:	18 2b       	or	r17, r24
 204:	fe 01       	movw	r30, r28
 206:	e8 58       	subi	r30, 0x88	; 136
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	00 81       	ld	r16, Z
 20c:	81 2f       	mov	r24, r17
 20e:	60 2f       	mov	r22, r16
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	74 df       	rcall	.-280    	; 0xfc <led_control>
 214:	c6 01       	movw	r24, r12
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <animation+0xf0>
//		led_control(ledInit[COUNTLED-i],ledCtrl[COUNTLED-i],ON);
		
		_delay_ms(25);
		led_control(ledInit[i]|ledInit[COUNTLED-i],ledCtrl[i],OFF);
 21a:	81 2f       	mov	r24, r17
 21c:	60 2f       	mov	r22, r16
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	6d df       	rcall	.-294    	; 0xfc <led_control>
 222:	22 96       	adiw	r28, 0x02	; 2
 224:	ee ef       	ldi	r30, 0xFE	; 254
 226:	ff ef       	ldi	r31, 0xFF	; 255
 228:	ee 0e       	add	r14, r30
 22a:	ff 1e       	adc	r15, r31

	if(scenary ==0x03)
	{
	
	i=0;
	while(i<COUNTLED)
 22c:	c8 31       	cpi	r28, 0x18	; 24
 22e:	d1 05       	cpc	r29, r1
 230:	11 f7       	brne	.-60     	; 0x1f6 <animation+0xd0>
	}
	
	}

	return 0;
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	ef 90       	pop	r14
 23e:	df 90       	pop	r13
 240:	cf 90       	pop	r12
 242:	08 95       	ret

00000244 <scenary_changer>:
#define MAX 0x03

uint8_t EEMEM startScenary;

uint16_t scenary_changer()
{
 244:	1f 93       	push	r17
	
	uint8_t ucData = 0x00;

	ucData = eeprom_read_byte (&startScenary);
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	8f d0       	rcall	.+286    	; 0x36a <__eerd_byte_tn13a>
 24c:	18 2f       	mov	r17, r24

	eeprom_write_byte (&startScenary, ucData+1);
 24e:	68 2f       	mov	r22, r24
 250:	6f 5f       	subi	r22, 0xFF	; 255
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	91 d0       	rcall	.+290    	; 0x37a <__eewr_byte_tn13a>
	if((ucData>=MAX)|(ucData==0xFF))
 258:	13 30       	cpi	r17, 0x03	; 3
 25a:	20 f0       	brcs	.+8      	; 0x264 <scenary_changer+0x20>
	{	
	eeprom_write_byte (&startScenary, 0x00);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	8b d0       	rcall	.+278    	; 0x37a <__eewr_byte_tn13a>
	}

	return ucData;
}
 264:	81 2f       	mov	r24, r17
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	1f 91       	pop	r17
 26a:	08 95       	ret

0000026c <setup>:
#endif

 void setup() 	 
{ 	 
 
  	DDRB |= 0xFF;
 26c:	87 b3       	in	r24, 0x17	; 23
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x00;
 272:	88 b3       	in	r24, 0x18	; 24
 274:	88 bb       	out	0x18, r24	; 24
  
} 	 
 276:	08 95       	ret

00000278 <doSound>:
    	sleep_cpu();
}


inline void doSound(void)
{
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
	
	//On timer and setting
	TCCR0A = (1 << COM0A0) | (1 << WGM01);	//Toggle OC0A (PB0) on Compare Match ; mode = CTC
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (1 << CS01) | (1 << CS00);		//Clock Select = F_CPU/64
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	83 bf       	out	0x33, r24	; 51
 28c:	c0 e0       	ldi	r28, 0x00	; 0
 28e:	d0 e0       	ldi	r29, 0x00	; 0
 290:	90 ec       	ldi	r25, 0xC0	; 192
 292:	e9 2e       	mov	r14, r25
 294:	9d e5       	ldi	r25, 0x5D	; 93
 296:	f9 2e       	mov	r15, r25
 298:	fe 01       	movw	r30, r28
 29a:	ec 5e       	subi	r30, 0xEC	; 236
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
	
	//playing notes
	for (uint8_t i = 0; i < COUNT_NOTES; i++)
	{
		//read data from mem
		int16_t freq = pgm_read_word(&(frequences[i]));
 29e:	25 91       	lpm	r18, Z+
 2a0:	34 91       	lpm	r19, Z+
 2a2:	fe 01       	movw	r30, r28
 2a4:	ee 59       	subi	r30, 0x9E	; 158
 2a6:	ff 4f       	sbci	r31, 0xFF	; 255
		int16_t dur = pgm_read_word(&(durations[i]));
 2a8:	05 91       	lpm	r16, Z+
 2aa:	14 91       	lpm	r17, Z+
		//Amplifation duration 1.5 time
//		dur *= 3;
//		dur /= 2;
		
		//Enter freq in the exit PB0
		OCR0A = (F_CPU / (2UL * 64UL * freq)) - 1;
 2ac:	44 27       	eor	r20, r20
 2ae:	37 fd       	sbrc	r19, 7
 2b0:	40 95       	com	r20
 2b2:	54 2f       	mov	r21, r20
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	44 1f       	adc	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	8a 95       	dec	r24
 2c0:	d1 f7       	brne	.-12     	; 0x2b6 <doSound+0x3e>
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	7c e7       	ldi	r23, 0x7C	; 124
 2c6:	82 e9       	ldi	r24, 0x92	; 146
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	2d d0       	rcall	.+90     	; 0x326 <__udivmodsi4>
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	26 bf       	out	0x36, r18	; 54
		PORTB = OCR0A|0xAA;
 2d0:	86 b7       	in	r24, 0x36	; 54
 2d2:	8a 6a       	ori	r24, 0xAA	; 170
 2d4:	88 bb       	out	0x18, r24	; 24
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <doSound+0x6a>
 2d8:	c7 01       	movw	r24, r14
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <doSound+0x62>
		//waiting
		while (dur > 0)
		{
			_delay_ms(10);
			dur -= 10;
 2de:	0a 50       	subi	r16, 0x0A	; 10
 2e0:	10 40       	sbci	r17, 0x00	; 0
		
		//Enter freq in the exit PB0
		OCR0A = (F_CPU / (2UL * 64UL * freq)) - 1;
		PORTB = OCR0A|0xAA;
		//waiting
		while (dur > 0)
 2e2:	10 16       	cp	r1, r16
 2e4:	11 06       	cpc	r1, r17
 2e6:	c4 f3       	brlt	.-16     	; 0x2d8 <doSound+0x60>
 2e8:	22 96       	adiw	r28, 0x02	; 2
	//On timer and setting
	TCCR0A = (1 << COM0A0) | (1 << WGM01);	//Toggle OC0A (PB0) on Compare Match ; mode = CTC
	TCCR0B = (1 << CS01) | (1 << CS00);		//Clock Select = F_CPU/64
	
	//playing notes
	for (uint8_t i = 0; i < COUNT_NOTES; i++)
 2ea:	ce 34       	cpi	r28, 0x4E	; 78
 2ec:	d1 05       	cpc	r29, r1
 2ee:	a1 f6       	brne	.-88     	; 0x298 <doSound+0x20>
			dur -= 10;
		}
	}
	
	//Timer off
	TCCR0A = 0;
 2f0:	1f bc       	out	0x2f, r1	; 47
	TCCR0B = 0;
 2f2:	13 be       	out	0x33, r1	; 51
	
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	08 95       	ret

00000302 <march>:
#endif

 void setup() 	 
{ 	 
 
  	DDRB |= 0xFF;
 302:	87 b3       	in	r24, 0x17	; 23
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x00;
 308:	88 b3       	in	r24, 0x18	; 24
 30a:	88 bb       	out	0x18, r24	; 24


void march()
{ 	 
		setup();
		doSound();
 30c:	b5 df       	rcall	.-150    	; 0x278 <doSound>
		PORTB=0x00;
 30e:	18 ba       	out	0x18, r1	; 24
		DDRB |= 0x00;
 310:	87 b3       	in	r24, 0x17	; 23
 312:	87 bb       	out	0x17, r24	; 23
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 314:	85 b7       	in	r24, 0x35	; 53
 316:	87 7e       	andi	r24, 0xE7	; 231
 318:	80 61       	ori	r24, 0x10	; 16
 31a:	85 bf       	out	0x35, r24	; 53
		sleep_enable(); 
 31c:	85 b7       	in	r24, 0x35	; 53
 31e:	80 62       	ori	r24, 0x20	; 32
 320:	85 bf       	out	0x35, r24	; 53
    	sleep_cpu();
 322:	88 95       	sleep
}
 324:	08 95       	ret

00000326 <__udivmodsi4>:
 326:	a1 e2       	ldi	r26, 0x21	; 33
 328:	1a 2e       	mov	r1, r26
 32a:	aa 1b       	sub	r26, r26
 32c:	bb 1b       	sub	r27, r27
 32e:	fd 01       	movw	r30, r26
 330:	0d c0       	rjmp	.+26     	; 0x34c <__udivmodsi4_ep>

00000332 <__udivmodsi4_loop>:
 332:	aa 1f       	adc	r26, r26
 334:	bb 1f       	adc	r27, r27
 336:	ee 1f       	adc	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	a2 17       	cp	r26, r18
 33c:	b3 07       	cpc	r27, r19
 33e:	e4 07       	cpc	r30, r20
 340:	f5 07       	cpc	r31, r21
 342:	20 f0       	brcs	.+8      	; 0x34c <__udivmodsi4_ep>
 344:	a2 1b       	sub	r26, r18
 346:	b3 0b       	sbc	r27, r19
 348:	e4 0b       	sbc	r30, r20
 34a:	f5 0b       	sbc	r31, r21

0000034c <__udivmodsi4_ep>:
 34c:	66 1f       	adc	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	1a 94       	dec	r1
 356:	69 f7       	brne	.-38     	; 0x332 <__udivmodsi4_loop>
 358:	60 95       	com	r22
 35a:	70 95       	com	r23
 35c:	80 95       	com	r24
 35e:	90 95       	com	r25
 360:	9b 01       	movw	r18, r22
 362:	ac 01       	movw	r20, r24
 364:	bd 01       	movw	r22, r26
 366:	cf 01       	movw	r24, r30
 368:	08 95       	ret

0000036a <__eerd_byte_tn13a>:
 36a:	e1 99       	sbic	0x1c, 1	; 28
 36c:	fe cf       	rjmp	.-4      	; 0x36a <__eerd_byte_tn13a>
 36e:	1f ba       	out	0x1f, r1	; 31
 370:	8e bb       	out	0x1e, r24	; 30
 372:	e0 9a       	sbi	0x1c, 0	; 28
 374:	99 27       	eor	r25, r25
 376:	8d b3       	in	r24, 0x1d	; 29
 378:	08 95       	ret

0000037a <__eewr_byte_tn13a>:
 37a:	26 2f       	mov	r18, r22

0000037c <__eewr_r18_tn13a>:
 37c:	e1 99       	sbic	0x1c, 1	; 28
 37e:	fe cf       	rjmp	.-4      	; 0x37c <__eewr_r18_tn13a>
 380:	1c ba       	out	0x1c, r1	; 28
 382:	1f ba       	out	0x1f, r1	; 31
 384:	8e bb       	out	0x1e, r24	; 30
 386:	2d bb       	out	0x1d, r18	; 29
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	e2 9a       	sbi	0x1c, 2	; 28
 38e:	e1 9a       	sbi	0x1c, 1	; 28
 390:	0f be       	out	0x3f, r0	; 63
 392:	01 96       	adiw	r24, 0x01	; 1
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
